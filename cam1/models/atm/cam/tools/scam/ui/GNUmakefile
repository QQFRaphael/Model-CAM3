# GNUmakefile for cross platform building of SCAM
# Author: John Pedretti  (pedretti@ucar.edu)
#------------------------------------------------------------
# VARIABLES
#------------------------------------------------------------
TARGET          = ../scamgui
#
# include the variables that are defined in the configure output
CONFIG_FILE     = config.out
include $(CONFIG_FILE)
#
# DEBUG FLAG IS CURRENTLY UNDEFINED
#  to add a preprocessor debug token, use "DEBUG_FLAG = -DDBUG" or whatever
DEBUG_FLAG = 
#
CPPFLAGS       := $(CPPFLAGS) $(DEBUG_FLAG) $(INCLUDES)
LFLAGS	+= $(LINK_LIBS)
#
VPATH = $(UI_DIR)
#
UI_FILES_WITH_PATH= $(wildcard $(UI_DIR)/*.ui)
UI_FILES	= $(sort $(notdir $(UI_FILES_WITH_PATH)))
UI_SRCS		= $(UI_FILES:.ui=.cpp)
UI_HDRS		= $(UI_FILES:.ui=.h)
#
# moc sources and headers: used for Qt signal/slot constructs in ui code
# - all headers which use signals/slots have the macro "Q_OBJECT" present
#  in the class definitions; these all need to be processed by the
#  "meta object compiler (moc)" which generates extra source code to
#  implement the signal/slots, i.e., if "foo.h" contains the token "Q_OBJECT"
#  it will be used by moc to generate the file "foo.moc.cpp" (the .moc. is
#   just an arbitrary extension to make it easier to identify sources 
#   generated by moc). Use 'grep -l' to list all the files containing the token
MOC                = $(QTDIR)/bin/moc
MOC_HDRS_WITH_PATH = $(shell (grep -l "Q_OBJECT" $(UI_DIR)/*.h ))
MOC_HDRS           = $(sort $(notdir $(MOC_HDRS_WITH_PATH)))
MOC_SRCS	   = $(sort $(MOC_HDRS:.h=.moc.cpp)  $(UI_HDRS:.h=.moc.cpp))
# 
# SRCS_WITH_PATH = all files ending in .cpp 
# SRCS = SRCS_WITH_PATH without the paths
#
SRCS_WITH_PATH	= $(wildcard $(UI_DIR)/*.cpp )
CPP_SRCS	= $(sort $(notdir $(SRCS_WITH_PATH)))
#
OBJS		= $(sort $(CPP_SRCS:.cpp=.o) $(UI_SRCS:.cpp=.o) $(MOC_SRCS:.cpp=.o) )
#
#--------------------------------------------------------
#  COMMON RULES
#--------------------------------------------------------

.SUFFIXES: .cpp .c .moc.cpp .ui .h

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $<

.c.o:
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $<

# rule for building meta object compiler source files
#          - see QT docs for more info on MOC
.h.moc.cpp:
	$(MOC) -o $@ $<
# rule for .h and .cpp from .ui files
.ui.h:
	uic -o $@ $<
.ui.cpp:
	uic -o $@ -impl $*.h $<

#--------------------------------------------------------
# TARGETS
#--------------------------------------------------------

all: $(CONFIG_FILE) $(TARGET) 

# "make fast" doesn't regenerate the dependencies
fast: all 

#
# use CC (gcc) to link
#
$(TARGET): $(OBJS)
	$(CC) $(OBJS) \
          -o $(TARGET) $(LFLAGS)

# if the config file doesn't exist run configure script
$(CONFIG_FILE):
	./configure

clean:
	rm -f core *.o *.d *.d.*

realclean: clean
	touch config.out
	rm -f $(TARGET) *moc* *~ \#*  TAGS ../*/TAGS config.out \
	$(UI_SRCS) $(UI_HDRS) config.out

distclean: realclean
	rm -f  $(CONFIG_FILE)

# "make dist" is used to make a compressed executable suitably identified,
#  and ready to be distributed
dist:
	$(STRIP) $(TARGET)
	cat $(TARGET) | gzip > $(TARGET).$(SYSTEM).gz 

# "make showpath" echos the directories searched for source code
showpath:
	@echo TOP_DIR = $(TOP_DIR)

ostype:
	@echo OSTYPE = $(SYSTEM)

# "make tags" creates a tags table suitable for use with emacs
tags:
	etags  $(UI_DIR)/*.[ch] $(UI_DIR)/*.cpp 

# "make tgz" creates a compressed archive of all the files in the ui directory
#   except for the target, and object files
tgz:
	@ cd ..; tar cvf - `find ui -type f  ! -name "*.o" ! -name "*.d" ! -print` \
	 | gzip > ui.tgz 

# "make showsrc" displays the list of sources used to build the target
# (useful for debugging the make process)
showsrc:
	@echo ***SRCS_WITH_PATH***  $(SRCS_WITH_PATH) 
	@echo ***SRCS***  $(SRCS) 
# "make showsrc" displays the list of objects used to build the target
# (useful for debugging the make process)
showobj:
	@echo ***OBJS*** $(OBJS)

# "make showmoc" displays the list of files used by MOC
# (useful for debugging the make process)
showmoc:
	@echo **MOC_SRCS** $(MOC_SRCS)
	@echo **MOC_HDRS** $(MOC_HDRS)
	@echo **UI_HDRS** $(UI_HDRS)

# these targets aren't real files: this directive stops 'make' from
# creating files with these names
.PHONY: all  clean realclean makdep

############################################################################
#
#   AUTOMATIC DEPENDENCY GENERATION
#
# this rule comes from the Gnu Make info pages
# (don't regenerate the dependencies if the target is "fast"
#
ifneq ($(MAKECMDGOALS),fast)

%.d: %.cpp $(UI_SRCS) $(MOC_SRCS)
	echo "generating dependencies for $<"
	@ $(SHELL) -ec '$(CXX) -MM -MG $(CPPFLAGS) $< \
               | sed '\''s/\($*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
               [ -s $@ ] || rm -f $@'


%.d: %.c
	echo "generating dependencies for $<"
	@ $(SHELL) -ec '$(CC) -MM -MG $(CPPFLAGS) $< \
               | sed '\''s/\($*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
               [ -s $@ ] || rm -f $@'

endif


# include the automatically generated dependencies unless "make clean"
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),realclean)
-include  $(OBJS:.o=.d)
endif
endif

